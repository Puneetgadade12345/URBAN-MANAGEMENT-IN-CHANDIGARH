#include <iostream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

void primsAlgorithm(int V, vector<vector<pair<int, int>>>& adjList) {
    vector<int> key(V, INT_MAX); // Key values to pick the minimum edge weight
    vector<bool> inMST(V, false); // To track vertices included in the MST
    vector<int> parent(V, -1); // To store the MST

    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

    key[0] = 0; // Start from node 0
    pq.push({0, 0}); // (weight, node)

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        inMST[u] = true;

        for (auto& edge : adjList[u]) {
            int v = edge.first;
            int weight = edge.second;

            if (!inMST[v] && weight < key[v]) {
                key[v] = weight;
                pq.push({key[v], v});
                parent[v] = u;
            }
        }
    }

    // Print the MST
    cout << "Edges in the Minimum Spanning Tree:\n";
    for (int i = 1; i < V; ++i) {
        cout << parent[i] << " - " << i << " (Weight: " << key[i] << ")\n";
    }
}

int main() {
    int V, E;

    cout << "Enter the number of vertices: ";
    cin >> V;

    cout << "Enter the number of edges: ";
    cin >> E;

    vector<vector<pair<int, int>>> adjList(V);

    cout << "Enter the edges in the format <from_node> <to_node> <weight>:\n";
    for (int i = 0; i < E; ++i) {
        int u, v, weight;
        cin >> u >> v >> weight;
        adjList[u].push_back({v, weight});
        adjList[v].push_back({u, weight});
    }

    primsAlgorithm(V, adjList);

    return 0;
}
